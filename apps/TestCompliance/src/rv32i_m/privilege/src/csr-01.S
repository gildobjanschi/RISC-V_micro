
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.1
// timestamp : Tue Dec 15 15:41:59 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32im.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the remu instruction of the RISC-V M extension for the remu covergroup.
//
#define XLEN 32
#define TEST_CASE_1

#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IM")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1
#define sscratch 0x140

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*M.*);def TEST_CASE_1=True;",csr)

RVTEST_SIGBASE( x5,signature_x5_1)

inst_0:

  TEST_CASE(a5, a0,         0, x5, 0, csrw sscratch, zero; csrr a0, sscratch);
  TEST_CASE(a5, a0,         0, x5, 0, csrrwi a0, sscratch, 0; csrrwi a0, sscratch, 0xF);
  TEST_CASE(a5, a0,      0x1f, x5, 0, csrrsi x0, sscratch, 0x10; csrr a0, sscratch);

  csrwi sscratch, 3
  TEST_CASE(a5, a0,         3, x5, 0, csrr a0, sscratch);
  TEST_CASE(a5, a1,         3, x5, 0, csrrci a1, sscratch, 1);
  TEST_CASE(a5, a2,         2, x5, 0, csrrsi a2, sscratch, 4);
  TEST_CASE(a5, a3,         6, x5, 0, csrrwi a3, sscratch, 2);
  TEST_CASE(a5, a1,         2, x5, 0, li a0, 0xbad1dea; csrrw a1, sscratch, a0);
  TEST_CASE(a5, a1, 0xbad1dea, x5, 0, li a0, 0x0001dea; csrrc a1, sscratch, a0);
  TEST_CASE(a5, a1, 0xbad0000, x5, 0, li a0, 0x000beef; csrrs a1, sscratch, a0);
  TEST_CASE(a5, a0, 0xbadbeef, x5, 0, li a0, 0xbad1dea; csrrw a0, sscratch, a0);
  TEST_CASE(a5, a0, 0xbad1dea, x5, 0, li a0, 0x0001dea; csrrc a0, sscratch, a0);
  TEST_CASE(a5, a0, 0xbad0000, x5, 0, li a0, 0x000beef; csrrs a0, sscratch, a0);
  TEST_CASE(a5, a0, 0xbadbeef, x5, 0, csrr a0, sscratch);

#endif

RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4

rvtest_data:
.word 0xbabecafe
.word 0xbabecafe
.word 0xbabecafe
.word 0xbabecafe
RVTEST_DATA_END


RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_1:
    .fill 195*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
#ifdef rvtest_mtrap_routine
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
#endif
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
